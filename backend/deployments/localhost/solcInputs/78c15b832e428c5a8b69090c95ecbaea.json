{
  "language": "Solidity",
  "sources": {
    "contracts/Did.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/**\n * @title Decentralized Identity Smart Contract\n * @dev Implements a decentralized identity system on the CELO blockchain.\n */\ncontract DecentralizedIdentity {\n    /**\n     * @dev Struct to represent identity information.\n     */\n    struct Identity {\n        string name;\n        uint age;\n        bool exists;\n        address owner;\n    }\n\n    // Mapping to store identities with their corresponding  addresses\n    mapping(address => Identity) public identities;\n    // Mapping to store the order in which identities were created\n    mapping(uint => address) public identitiesByIndex;\n    // Mapping to track whether an address has a valid identity\n    mapping(address => bool) public hasIdentity;\n\n    // Event emitted when a new identity is created\n    event IdentityCreated(address indexed owner, string name, uint age);\n    // Event emitted when identity information is updated\n    event IdentityUpdated(address indexed owner, string newName, uint newAge);\n    // Event emitted when access is revoked\n    event AccessRevoked(address indexed owner);\n\n    /**\n     * @dev Modifier to restrict access to the owner only.\n     */\n    modifier onlyOwner {\n        require(identities[msg.sender].exists, \"Identity does not exist\");\n        require(identities[msg.sender].owner == msg.sender, \"Not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to check if the caller has a valid identity.\n     */\n    modifier onlyValidIdentity {\n        require(hasIdentity[msg.sender], \"Identity does not exist\");\n        _;\n    }\n\n    /**\n     * @dev Function to create a new identity.\n     * @param _name The name of the identity owner.\n     * @param _age The age of the identity owner.\n     */\n    function createIdentity(string memory _name, uint _age) external {\n        require(!identities[msg.sender].exists, \"Identity already exists\");\n\n        Identity storage newIdentity = identities[msg.sender];\n        newIdentity.name = _name;\n        newIdentity.age = _age;\n        newIdentity.exists = true;\n        newIdentity.owner = msg.sender;\n\n        hasIdentity[msg.sender] = true;\n        identitiesByIndex[block.number - 1] = msg.sender; // Store the index for getAllIdentities\n\n        emit IdentityCreated(msg.sender, _name, _age);\n    }\n\n    /**\n     * @dev Function to update identity information.\n     * @param _newName The new name of the identity owner.\n     * @param _newAge The new age of the identity owner.\n     */\n    function updateIdentity(string memory _newName, uint _newAge) external onlyOwner {\n        Identity storage existingIdentity = identities[msg.sender];\n        existingIdentity.name = _newName;\n        existingIdentity.age = _newAge;\n\n        emit IdentityUpdated(msg.sender, _newName, _newAge);\n    }\n\n    /**\n     * @dev Function to revoke access and delete identity.\n     */\n    function revokeAccess() external onlyValidIdentity {\n        delete identities[msg.sender];\n        hasIdentity[msg.sender] = false;\n\n        emit AccessRevoked(msg.sender);\n    }\n\n    /**\n     * @dev Function to check if an address has a valid identity.\n     * @param _owner The address to check.\n     * @return true if the address has a valid identity, false otherwise.\n     */\n    function hasValidIdentity(address _owner) external view returns (bool) {\n        return hasIdentity[_owner];\n    }\n\n    /**\n     * @dev Function to get identity information for a given address.\n     * @param _owner The address of the identity owner.\n     * @return name The name of the identity owner.\n     * @return age The age of the identity owner.\n     */\n    function getIdentity(address _owner) external view returns (string memory, uint) {\n        Identity storage requestedIdentity = identities[_owner];\n        require(requestedIdentity.exists, \"Identity does not exist\");\n\n        return (requestedIdentity.name, requestedIdentity.age);\n    }\n\n    /**\n     * @dev Function to get a list of all identities.\n     * @return allIdentities An array containing all valid identity addresses.\n     */\n    function getAllIdentities() external view returns (address[] memory) {\n    address[] memory allIdentities = new address[](block.number - 1);\n    uint index = 0;\n\n    for (uint i = 1; i < block.number; i++) {\n        address identityOwner = identitiesByIndex[i];\n        if (identities[identityOwner].exists) {\n            allIdentities[index] = identityOwner;\n            index++;\n        }\n    }\n\n    // Resize the array to the actual number of valid identities\n    assembly {\n        mstore(allIdentities, index)\n    }\n\n    return allIdentities;\n}\n}\n"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}